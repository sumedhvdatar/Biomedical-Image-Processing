clc;
clear all;
imtool close all;
workspace;
fontSize=20;
%read image.
I=imread('img1.BMP');
imtool(I);
subplot(3,2,1),imshow(I);title('Original Image','FontSize',fontSize);
g=rgb2gray(I);
subplot(3,2,2);imshow(g);
title('Gray Image','FontSize',fontSize);
[binaryimage, xi, yi]=roipolyold();
% create a binary image ('mask') from the roi object
subplot(3,2,3);
imshow(binaryimage);
title('Binary  Mask','FontSize',fontSize);
%get cordinates of the boundary of the drawn region.
structboundaries=bwboundaries(binaryimage);
xy=structboundaries{1};
x=xy(:,2);
y=xy(:,1);
subplot(3,2,1);
hold on;
plot(x,y ,'linewidth',2);
burnedimage=I;
%burn line into image by setting it to 255 wherever mask is true
burnedimage(binaryimage)=255;
%display the image with the mask.
subplot(3,2,4);
imshow(burnedimage);title('Burned Image','FontSize',fontSize);
%will keep the image tht's inside the mask.
maskedimage=I;
maskedimage(~binaryimage)=0;
subplot(3,2,5);
imshow(maskedimage);title('Masked Image','FontSize',fontSize);
redimage = maskedimage;   % Create a new matrix equal to the matrix 
% of your original image. 
redimage (:, :, 2:3) = 0;    % This selectively nullifies the second 
% and third columns of the colormap 
% matrix which are part of the original matrix. Since the colors 
% are mapped using RGB, or columns with values of Red, Green and  
% Blue, so we can selectively nullify the green and blue columns to 
% obtain only the red part of the image. 
subplot(3,2,6);imshow(redimage); title('Cropped Image','FontSize',fontSize);
meanGL=mean(maskedimage(binaryimage));
message=sprintf('area affected=%3f',meanGL);
msgbox(message);
fprintf('\nIMAGE DATA INFORMATION \n');
fprintf('\nMean value within drawn area=%3f\n\n',meanGL);
[m , n]=size(redimage);
 redimage=im2uint8(redimage);
 hist=zeros(1,256);
   for i=1:m
     for j=1:n 
         for num=1:256
          if redimage(i,j)==num
            hist(num)=hist(num)+1;
          end
         end
     end
   end
   hist1=hist;
   hist=hist/(m*n);
   

%----------------------------COMMENT MEAN VALUE-----------------------
sum=0;
for i=0:1:255;
    sum=sum+(i*hist(i+1));
end
sum;
fprintf(' MEAN VALUE=  %3.8f \n\n',sum);

%---------------------------COMMENT STANDART DEVIATION----------------

sum2=0;
for i=0:1:255;
    sum2=sum2+((i-sum)^2)*hist(i+1);
end
sum3=sqrt(sum2);
fprintf(' STANDARD DEVIATION = %3.8f \n\n',sum3);
%----------------------------COMMENT RMS VALUE-----------------------
sum4=0;
for i=0:1:255;
    sum4=sum4+(i^2*hist(i+1));
end
sum5=sqrt(sum4);
fprintf('  RMS VALUE of the Image= %3.8f \n\n',sum5);

%-----------------CUMULATIVE GRAY LEVEL DISTRUBITION-----------------------

sum8=0;
Z=zeros(256,1);
for i=0:1:255;
    sum8=sum8+hist(i+1);
   Z(i+1)=sum8;
end
sum8;

%-------------------MODE---------------------------------------------------
zz=max(hist);
ind=find(hist==zz);

%-------------------ENTROPY------------------------------------------------
azz=find(hist>0);
[vv,nn]=size(azz);
sum8=0;

for i=1:1:nn;
    sum8=sum8+log2(hist(azz(i)))*hist(azz(i));
end
sum8=-sum8;
fprintf(' ENTROPY OF THE IMAGE = %3.8f \n\n',sum8)


if((sum <=68.56)&& (sum>=51))&&((sum5<=125.73)&&(sum5 >=83.69))&&((sum8 <=1.82)&&(sum8 >=1.37))
 message=sprintf('   Image   is   Normal');
 msgbox(message);

 
elseif((sum <=68.56)&& (sum>=15))&&((sum3<=69)&&(sum3>=30))&&((sum5<89)&&(sum5 >=45.12))&&((sum8 <=1.2)&&(sum8 >=.29))
 message=sprintf('Image is CANCER');
 msgbox(message);
 
elseif((sum <=35.0)&& (sum>=10.6))&&((sum5<=81.13)&&(sum5 >=49.12))&&((sum8 <=1.1)&&(sum8 >=.19))
 message=sprintf('  Image   is   TUMOUR'); 
 msgbox(message);

 elseif((sum <=15.69)&& (sum>=6.54))&&((sum5<=54.13)&&(sum5 >=34.6))&&((sum8 <=0.77)&&(sum8 >=.34))
 message=sprintf('   Image   is   ULCER'); 
msgbox(message);
  elseif((sum <=21.69)&& (sum>=.43))&&((sum5<=36.9)&&(sum5 >=7.59))&&((sum8 <=0.87)&&(sum8 >=.04))
      message=sprintf(' Image  is   POLYP  '); 
      msgbox(message);
 
  
 
else
    message=sprintf('  Image   is   ABNORMAL'); 
 msgbox(message);
  
              
end